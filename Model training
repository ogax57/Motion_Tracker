from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import TensorBoard
from sklearn.model_selection import train_test_split
import cv2
import numpy as np
import os
from matplotlib import pyplot as plt
import time
import mediapipe as mp
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical


DATA_PATH = os.path.join('C:/Users/ilgaz/Desktop/jump')
# Actions that we try to detect
actions = np.array(['hello', 'jump ready', 'jumping up', 'thanks'])
no_sequences = 90
sequence_length = 30
label_map = {label: num for num, label in enumerate(actions)}
sequences, labels = [], []
print("action")
for action in actions:
    for sequence in np.array(os.listdir(os.path.join(DATA_PATH, action))).astype(int):
        window = []
        for frame_num in range(sequence_length):
            res = np.load(os.path.join(DATA_PATH, action, str(sequence), "{}.npy".format(frame_num)))
            window.append(res)
        sequences.append(window)
        labels.append(label_map[action])
print(np.array(sequences).shape)
print(np.array(labels).shape)
X = np.array(sequences)
print(X.shape)
y = to_categorical(labels).astype(int)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05)
print("model")
model = Sequential()
model.add(LSTM(64, return_sequences=True, activation='relu', input_shape=(30, 132)))
model.add(LSTM(128, return_sequences=True, activation='relu'))
model.add(LSTM(64, return_sequences=False, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(actions.shape[0], activation='softmax'))
optimizer = Adam()
model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])
threshold = 0.5
epochs = 2000
batch_size = 32
save_dir = os.path.join(os.path.expanduser("~"), "Desktop", "models")
i = 0
print("hello")
# Manually implement the training loop
for epoch in range(epochs):
    print(f"Epoch {epoch + 1}/{epochs}")
    history = model.fit(X_train, y_train, batch_size=batch_size, epochs=1, verbose=1)
    # Evaluate the model on the test set
    _, accuracy = model.evaluate(X_test, y_test, verbose=0)
    print(f"Accuracy: {accuracy}")
    # Save the model if accuracy meets a certain threshold
    i += 1
    print(i)//300 can be changed it is not significant
    if i == 300: 
        model.save(os.path.join(save_dir, 'jr_ju_h_t.h5'))
        print('Model saved.')
        break
# Print model summary
model.summary()
